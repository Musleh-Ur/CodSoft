# -*- coding: utf-8 -*-
"""Customer Churn Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LXSjowdtUnlvSMcdPswvbCzKE6nmDvxd
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import cross_val_score
from sklearn import metrics
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from xgboost import XGBClassifier
from sklearn.metrics import  auc, accuracy_score, confusion_matrix, classification_report, f1_score, precision_score, recall_score, classification_report, confusion_matrix, accuracy_score, roc_curve, roc_auc_score, RocCurveDisplay
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler

df = pd.read_csv("/content/drive/MyDrive/datasets/CodSoft/Bank Customer Churn Prediction/Churn_Modelling.csv")

df.head()

df.info()

# Churn Count
sns.countplot(x = 'Exited', data = df)

# Credit Score distribution
sns.distplot(df['CreditScore'])

# Age distribution
sns.distplot(df['Age'])

# Tenure distribution
sns.distplot(df['Tenure'])

df.tail(5)

label_encoder = LabelEncoder()
df['Geography'] = label_encoder.fit_transform(df['Geography'])
df['Gender'] = label_encoder.fit_transform(df['Gender'])

df.head()

df = df.drop(['RowNumber', 'CustomerId', 'Surname', ], axis=1)

df.head()

plt.figure(figsize=(8, 6.5))
sns.heatmap(df.corr(), annot=True, fmt=".2f", cmap='coolwarm')
plt.show()

# Splitting the data into train and test sets
X = df.drop('Exited', axis=1)
y = df['Exited']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Normalizing the data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""# **Logistics Regression**"""

# Logistic Regression
log_reg = LogisticRegression()
log_reg.fit(X_train, y_train)
log_y_pred = log_reg.predict(X_test)

y_pred = log_reg.predict(X_test)
#Calculate confusion matrix
cm_LR = confusion_matrix(y_test, y_pred)
# Define class labels
labels = ['LRT', 'MHR', 'NRT']
# Create a heatmap of the confusion matrix
plt.figure(figsize=(5, 2))
sns.heatmap(cm_LR, annot=True, fmt='d', xticklabels=labels, yticklabels=labels)
plt.xlabel("Predicted Labels")
plt.ylabel("True Labels")
plt.title("Confusion Matrix - Logistic Regression")
plt.show()

# Accuracy scores
log_acc = accuracy_score(y_test, log_y_pred)
# F1 scores
log_f1 = f1_score(y_test, log_y_pred)
# Precision scores
log_prec = precision_score(y_test, log_y_pred)
# Recall scores
log_recall = recall_score(y_test, log_y_pred)

from sklearn.metrics import RocCurveDisplay
log_reg_disp = RocCurveDisplay.from_estimator(log_reg, X_test, y_test)

"""#  Gradient Boosting"""

# Gradient Boosting
grad_boost = GradientBoostingClassifier()
grad_boost.fit(X_train, y_train)
gb_y_pred = grad_boost.predict(X_test)

y_pred = grad_boost.predict(X_test)
#Calculate confusion matrix
cm_gb = confusion_matrix(y_test, y_pred)
# Define class labels
labels = ['LRT', 'MHR', 'NRT']
# Create a heatmap of the confusion matrix
plt.figure(figsize=(5, 2))
sns.heatmap(cm_gb, annot=True, fmt='d', xticklabels=labels, yticklabels=labels)
plt.xlabel("Predicted Labels")
plt.ylabel("True Labels")
plt.title("Confusion Matrix - Gradient Boosting")
plt.show()

# Accuracy scores
gb_acc = accuracy_score(y_test, gb_y_pred)
# F1 scores
gb_f1 = f1_score(y_test, gb_y_pred)
# Precision scores
gb_prec = precision_score(y_test, gb_y_pred)
# Recall scores
rf_recall = recall_score(y_test, rf_y_pred)

from sklearn.metrics import RocCurveDisplay
grad_boost_disp = RocCurveDisplay.from_estimator(grad_boost, X_test, y_test)

"""# Random Forrest"""

# Random Forest
random_forest = RandomForestClassifier()
random_forest.fit(X_train, y_train)
rf_y_pred = random_forest.predict(X_test)

# Accuracy scores
rf_acc = accuracy_score(y_test, rf_y_pred)
# F1 scores
rf_f1 = f1_score(y_test, rf_y_pred)
# Precision scores
rf_prec = precision_score(y_test, rf_y_pred)
# Recall scores
rf_recall = recall_score(y_test, rf_y_pred)

y_pred = random_forest.predict(X_test)
#Calculate confusion matrix
rf_acc = confusion_matrix(y_test, y_pred)
# Define class labels
labels = ['LRT', 'MHR', 'NRT']
# Create a heatmap of the confusion matrix
plt.figure(figsize=(5, 2))
sns.heatmap(rf_acc, annot=True, fmt='d', xticklabels=labels, yticklabels=labels)
plt.xlabel("Predicted Labels")
plt.ylabel("True Labels")
plt.title("Confusion Matrix - Random Forrest")
plt.show()

from sklearn.metrics import RocCurveDisplay
random_forest_disp = RocCurveDisplay.from_estimator(random_forest, X_test, y_test)

"""# Result

The best Predicted Model is Gradient Boosting
"""

# Import library
from matplotlib import pyplot

# Get feature importances
importances = grad_boost.feature_importances_

# Create a dataframe
importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': importances})

# Sort the dataframe by importance in descending order
importance_df = importance_df.sort_values(by='Importance', ascending=False)

# Plot feature importances
plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=importance_df)
plt.title('Feature Importance')
plt.show()